// Code generated by MockGen. DO NOT EDIT.
// Source: examples/helloworld/kod_gen_interface.go
//
// Generated by this command:
//
//	mockgen -source examples/helloworld/kod_gen_interface.go -destination examples/helloworld/kod_gen_mock.go -package main
//
// Package main is a generated GoMock package.
package main

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockHelloworld is a mock of Helloworld interface.
type MockHelloworld struct {
	ctrl     *gomock.Controller
	recorder *MockHelloworldMockRecorder
}

// MockHelloworldMockRecorder is the mock recorder for MockHelloworld.
type MockHelloworldMockRecorder struct {
	mock *MockHelloworld
}

// NewMockHelloworld creates a new mock instance.
func NewMockHelloworld(ctrl *gomock.Controller) *MockHelloworld {
	mock := &MockHelloworld{ctrl: ctrl}
	mock.recorder = &MockHelloworldMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloworld) EXPECT() *MockHelloworldMockRecorder {
	return m.recorder
}

// SayHello mocks base method.
func (m *MockHelloworld) SayHello() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SayHello")
	ret0, _ := ret[0].(string)
	return ret0
}

// SayHello indicates an expected call of SayHello.
func (mr *MockHelloworldMockRecorder) SayHello() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockHelloworld)(nil).SayHello))
}
