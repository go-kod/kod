// Code generated by "kod generate". DO NOT EDIT.
//go:build !ignoreKodGen

package ranklist

import (
	"context"
	"github.com/go-kod/kod"
	"github.com/go-kod/kod/interceptor"
	"reflect"
)

func init() {
	kod.Register(&kod.Registration{
		Name:      "github.com/go-kod/kod/examples/domain/ranklist/Component",
		Interface: reflect.TypeOf((*Component)(nil)).Elem(),
		Impl:      reflect.TypeOf(impl{}),
		Refs:      ``,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			interceptors := info.Interceptors
			if h, ok := info.Impl.(interface {
				Interceptors() []interceptor.Interceptor
			}); ok {
				interceptors = append(interceptors, h.Interceptors()...)
			}

			return component_local_stub{
				impl:        info.Impl.(Component),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
}

// kod.InstanceOf checks.
var _ kod.InstanceOf[Component] = (*impl)(nil)

// Local stub implementations.

type component_local_stub struct {
	impl        Component
	name        string
	interceptor interceptor.Interceptor
}

// Check that component_local_stub implements the Component interface.
var _ Component = (*component_local_stub)(nil)

func (s component_local_stub) Add(ctx context.Context, a1 *AddRequest) (err error) {

	if s.interceptor == nil {
		err = s.impl.Add(ctx, a1)
		return
	}

	call := func(ctx context.Context, info interceptor.CallInfo, req, res []any) (err error) {
		err = s.impl.Add(ctx, a1)
		return
	}

	info := interceptor.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/go-kod/kod/examples/domain/ranklist/Component.Add",
		Method:     "Add",
	}

	err = s.interceptor(ctx, info, []any{a1}, []any{}, call)
	return
}

func (s component_local_stub) RankList(ctx context.Context, a1 *RankListRequest) (r0 []string, err error) {

	if s.interceptor == nil {
		r0, err = s.impl.RankList(ctx, a1)
		return
	}

	call := func(ctx context.Context, info interceptor.CallInfo, req, res []any) (err error) {
		r0, err = s.impl.RankList(ctx, a1)
		res[0] = r0
		return
	}

	info := interceptor.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/go-kod/kod/examples/domain/ranklist/Component.RankList",
		Method:     "RankList",
	}

	err = s.interceptor(ctx, info, []any{a1}, []any{r0}, call)
	return
}
