// Code generated by "kod generate". DO NOT EDIT.
//go:build !ignoreKodGen

package case1

import (
	"context"
	"github.com/gin-gonic/gin"
	"github.com/go-kod/kod"
	"github.com/go-kod/kod/interceptor"
	"github.com/labstack/echo/v4"
	"net/http"
	"reflect"
)

func init() {
	kod.Register(&kod.Registration{
		Name:  "github.com/go-kod/kod/tests/case1/HTTPController",
		Iface: reflect.TypeOf((*HTTPController)(nil)).Elem(),
		Impl:  reflect.TypeOf(httpControllerImpl{}),
		Refs:  ``,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			var interceptors []kod.Interceptor
			if h, ok := info.Impl.(interface{ Interceptors() []kod.Interceptor }); ok {
				interceptors = h.Interceptors()
			}

			return hTTPController_local_stub{
				impl:        info.Impl.(HTTPController),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:  "github.com/go-kod/kod/Main",
		Iface: reflect.TypeOf((*kod.Main)(nil)).Elem(),
		Impl:  reflect.TypeOf(App{}),
		Refs:  `⟦d40a644a:KoDeDgE:github.com/go-kod/kod/Main→github.com/go-kod/kod/tests/case1/Test1Component⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			var interceptors []kod.Interceptor
			if h, ok := info.Impl.(interface{ Interceptors() []kod.Interceptor }); ok {
				interceptors = h.Interceptors()
			}

			return main_local_stub{
				impl:        info.Impl.(kod.Main),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:  "github.com/go-kod/kod/tests/case1/Test1Component",
		Iface: reflect.TypeOf((*Test1Component)(nil)).Elem(),
		Impl:  reflect.TypeOf(test1Component{}),
		Refs:  ``,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			var interceptors []kod.Interceptor
			if h, ok := info.Impl.(interface{ Interceptors() []kod.Interceptor }); ok {
				interceptors = h.Interceptors()
			}

			return test1Component_local_stub{
				impl:        info.Impl.(Test1Component),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:  "github.com/go-kod/kod/tests/case1/Test2Component",
		Iface: reflect.TypeOf((*Test2Component)(nil)).Elem(),
		Impl:  reflect.TypeOf(test2Component{}),
		Refs:  ``,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			var interceptors []kod.Interceptor
			if h, ok := info.Impl.(interface{ Interceptors() []kod.Interceptor }); ok {
				interceptors = h.Interceptors()
			}

			return test2Component_local_stub{
				impl:        info.Impl.(Test2Component),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:  "github.com/go-kod/kod/tests/case1/panicCaseInterface",
		Iface: reflect.TypeOf((*panicCaseInterface)(nil)).Elem(),
		Impl:  reflect.TypeOf(panicCase{}),
		Refs:  ``,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			var interceptors []kod.Interceptor
			if h, ok := info.Impl.(interface{ Interceptors() []kod.Interceptor }); ok {
				interceptors = h.Interceptors()
			}

			return panicCaseInterface_local_stub{
				impl:        info.Impl.(panicCaseInterface),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:  "github.com/go-kod/kod/tests/case1/test1Controller",
		Iface: reflect.TypeOf((*test1Controller)(nil)).Elem(),
		Impl:  reflect.TypeOf(test1ControllerImpl{}),
		Refs:  `⟦dd37e4d0:KoDeDgE:github.com/go-kod/kod/tests/case1/test1Controller→github.com/go-kod/kod/tests/case1/Test1Component⟧`,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			var interceptors []kod.Interceptor
			if h, ok := info.Impl.(interface{ Interceptors() []kod.Interceptor }); ok {
				interceptors = h.Interceptors()
			}

			return test1Controller_local_stub{
				impl:        info.Impl.(test1Controller),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:  "github.com/go-kod/kod/tests/case1/testEchoController",
		Iface: reflect.TypeOf((*testEchoController)(nil)).Elem(),
		Impl:  reflect.TypeOf(testEchoControllerImpl{}),
		Refs:  ``,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			var interceptors []kod.Interceptor
			if h, ok := info.Impl.(interface{ Interceptors() []kod.Interceptor }); ok {
				interceptors = h.Interceptors()
			}

			return testEchoController_local_stub{
				impl:        info.Impl.(testEchoController),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:  "github.com/go-kod/kod/tests/case1/testGinController",
		Iface: reflect.TypeOf((*testGinController)(nil)).Elem(),
		Impl:  reflect.TypeOf(testGinControllerImpl{}),
		Refs:  ``,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			var interceptors []kod.Interceptor
			if h, ok := info.Impl.(interface{ Interceptors() []kod.Interceptor }); ok {
				interceptors = h.Interceptors()
			}

			return testGinController_local_stub{
				impl:        info.Impl.(testGinController),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:  "github.com/go-kod/kod/tests/case1/testRepository",
		Iface: reflect.TypeOf((*testRepository)(nil)).Elem(),
		Impl:  reflect.TypeOf(modelImpl{}),
		Refs:  ``,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			var interceptors []kod.Interceptor
			if h, ok := info.Impl.(interface{ Interceptors() []kod.Interceptor }); ok {
				interceptors = h.Interceptors()
			}

			return testRepository_local_stub{
				impl:        info.Impl.(testRepository),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
	kod.Register(&kod.Registration{
		Name:  "github.com/go-kod/kod/tests/case1/testService",
		Iface: reflect.TypeOf((*testService)(nil)).Elem(),
		Impl:  reflect.TypeOf(serviceImpl{}),
		Refs:  ``,
		LocalStubFn: func(ctx context.Context, info *kod.LocalStubFnInfo) any {
			var interceptors []kod.Interceptor
			if h, ok := info.Impl.(interface{ Interceptors() []kod.Interceptor }); ok {
				interceptors = h.Interceptors()
			}

			return testService_local_stub{
				impl:        info.Impl.(testService),
				interceptor: interceptor.Chain(interceptors),
				name:        info.Name,
			}
		},
	})
}

// kod.InstanceOf checks.
var _ kod.InstanceOf[HTTPController] = (*httpControllerImpl)(nil)
var _ kod.InstanceOf[kod.Main] = (*App)(nil)
var _ kod.InstanceOf[Test1Component] = (*test1Component)(nil)
var _ kod.InstanceOf[Test2Component] = (*test2Component)(nil)
var _ kod.InstanceOf[panicCaseInterface] = (*panicCase)(nil)
var _ kod.InstanceOf[test1Controller] = (*test1ControllerImpl)(nil)
var _ kod.InstanceOf[testEchoController] = (*testEchoControllerImpl)(nil)
var _ kod.InstanceOf[testGinController] = (*testGinControllerImpl)(nil)
var _ kod.InstanceOf[testRepository] = (*modelImpl)(nil)
var _ kod.InstanceOf[testService] = (*serviceImpl)(nil)

// Local stub implementations.

type hTTPController_local_stub struct {
	impl        HTTPController
	name        string
	interceptor kod.Interceptor
}

// Check that hTTPController_local_stub implements the HTTPController interface.
var _ HTTPController = (*hTTPController_local_stub)(nil)

func (s hTTPController_local_stub) Foo(a0 http.ResponseWriter, a1 *http.Request) {

	if s.interceptor == nil {
		s.impl.Foo(a0, a1)
		return
	}

	call := func(ctx context.Context, info kod.CallInfo, req, res []any) (err error) {
		a1 = a1.WithContext(ctx)
		s.impl.Foo(a0, a1)
		return
	}

	info := kod.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/go-kod/kod/tests/case1/HTTPController.Foo",
		Method:     "Foo",
	}

	var err error
	ctx := a1.Context()
	_ = s.interceptor(ctx, info, []any{a0, a1}, []any{}, call)
	if err != nil {
		a0.WriteHeader(http.StatusInternalServerError)
		a0.Write([]byte(err.Error()))
	}
}

type main_local_stub struct {
	impl        kod.Main
	name        string
	interceptor kod.Interceptor
}

// Check that main_local_stub implements the kod.Main interface.
var _ kod.Main = (*main_local_stub)(nil)

type test1Component_local_stub struct {
	impl        Test1Component
	name        string
	interceptor kod.Interceptor
}

// Check that test1Component_local_stub implements the Test1Component interface.
var _ Test1Component = (*test1Component_local_stub)(nil)

func (s test1Component_local_stub) Foo(ctx context.Context, a1 *FooReq) (r0 *FooRes, err error) {

	if s.interceptor == nil {
		r0, err = s.impl.Foo(ctx, a1)
		return
	}

	call := func(ctx context.Context, info kod.CallInfo, req, res []any) (err error) {
		r0, err = s.impl.Foo(ctx, a1)
		res[0] = r0
		return
	}

	info := kod.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/go-kod/kod/tests/case1/Test1Component.Foo",
		Method:     "Foo",
	}

	err = s.interceptor(ctx, info, []any{a1}, []any{r0}, call)
	return
}

type test2Component_local_stub struct {
	impl        Test2Component
	name        string
	interceptor kod.Interceptor
}

// Check that test2Component_local_stub implements the Test2Component interface.
var _ Test2Component = (*test2Component_local_stub)(nil)

func (s test2Component_local_stub) GetClient() (r0 *http.Client) {

	if s.interceptor == nil {
		r0 = s.impl.GetClient()
		return
	}

	call := func(ctx context.Context, info kod.CallInfo, req, res []any) (err error) {
		r0 = s.impl.GetClient()
		res[0] = r0
		return
	}

	info := kod.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/go-kod/kod/tests/case1/Test2Component.GetClient",
		Method:     "GetClient",
	}

	ctx := context.Background()
	_ = s.interceptor(ctx, info, []any{}, []any{r0}, call)
	return
}

type panicCaseInterface_local_stub struct {
	impl        panicCaseInterface
	name        string
	interceptor kod.Interceptor
}

// Check that panicCaseInterface_local_stub implements the panicCaseInterface interface.
var _ panicCaseInterface = (*panicCaseInterface_local_stub)(nil)

func (s panicCaseInterface_local_stub) TestPanic(a0 *http.Request) {

	if s.interceptor == nil {
		s.impl.TestPanic(a0)
		return
	}

	call := func(ctx context.Context, info kod.CallInfo, req, res []any) (err error) {
		s.impl.TestPanic(a0)
		return
	}

	info := kod.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/go-kod/kod/tests/case1/panicCaseInterface.TestPanic",
		Method:     "TestPanic",
	}

	ctx := context.Background()
	_ = s.interceptor(ctx, info, []any{a0}, []any{}, call)
}

type test1Controller_local_stub struct {
	impl        test1Controller
	name        string
	interceptor kod.Interceptor
}

// Check that test1Controller_local_stub implements the test1Controller interface.
var _ test1Controller = (*test1Controller_local_stub)(nil)

type testEchoController_local_stub struct {
	impl        testEchoController
	name        string
	interceptor kod.Interceptor
}

// Check that testEchoController_local_stub implements the testEchoController interface.
var _ testEchoController = (*testEchoController_local_stub)(nil)

func (s testEchoController_local_stub) Error(a0 echo.Context) (err error) {

	if s.interceptor == nil {
		err = s.impl.Error(a0)
		return
	}

	call := func(ctx context.Context, info kod.CallInfo, req, res []any) (err error) {
		a0.SetRequest(a0.Request().WithContext(ctx))
		err = s.impl.Error(a0)
		return
	}

	info := kod.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/go-kod/kod/tests/case1/testEchoController.Error",
		Method:     "Error",
	}

	ctx := a0.Request().Context()
	err = s.interceptor(ctx, info, []any{a0}, []any{}, call)
	if err != nil {
		a0.Error(err)
	}
	return
}

func (s testEchoController_local_stub) Hello(a0 echo.Context) (err error) {

	if s.interceptor == nil {
		err = s.impl.Hello(a0)
		return
	}

	call := func(ctx context.Context, info kod.CallInfo, req, res []any) (err error) {
		a0.SetRequest(a0.Request().WithContext(ctx))
		err = s.impl.Hello(a0)
		return
	}

	info := kod.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/go-kod/kod/tests/case1/testEchoController.Hello",
		Method:     "Hello",
	}

	ctx := a0.Request().Context()
	err = s.interceptor(ctx, info, []any{a0}, []any{}, call)
	if err != nil {
		a0.Error(err)
	}
	return
}

type testGinController_local_stub struct {
	impl        testGinController
	name        string
	interceptor kod.Interceptor
}

// Check that testGinController_local_stub implements the testGinController interface.
var _ testGinController = (*testGinController_local_stub)(nil)

func (s testGinController_local_stub) Hello(a0 *gin.Context) {

	if s.interceptor == nil {
		s.impl.Hello(a0)
		return
	}

	call := func(ctx context.Context, info kod.CallInfo, req, res []any) (err error) {
		a0.Request = a0.Request.WithContext(ctx)
		s.impl.Hello(a0)
		return
	}

	info := kod.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/go-kod/kod/tests/case1/testGinController.Hello",
		Method:     "Hello",
	}

	var err error
	ctx := a0.Request.Context()
	err = s.interceptor(ctx, info, []any{a0}, []any{}, call)
	if err != nil {
		a0.Error(err)
	}
}

type testRepository_local_stub struct {
	impl        testRepository
	name        string
	interceptor kod.Interceptor
}

// Check that testRepository_local_stub implements the testRepository interface.
var _ testRepository = (*testRepository_local_stub)(nil)

func (s testRepository_local_stub) Foo(ctx context.Context) (err error) {

	if s.interceptor == nil {
		err = s.impl.Foo(ctx)
		return
	}

	call := func(ctx context.Context, info kod.CallInfo, req, res []any) (err error) {
		err = s.impl.Foo(ctx)
		return
	}

	info := kod.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/go-kod/kod/tests/case1/testRepository.Foo",
		Method:     "Foo",
	}

	err = s.interceptor(ctx, info, []any{}, []any{}, call)
	return
}

type testService_local_stub struct {
	impl        testService
	name        string
	interceptor kod.Interceptor
}

// Check that testService_local_stub implements the testService interface.
var _ testService = (*testService_local_stub)(nil)

func (s testService_local_stub) Foo(ctx context.Context) (err error) {

	if s.interceptor == nil {
		err = s.impl.Foo(ctx)
		return
	}

	call := func(ctx context.Context, info kod.CallInfo, req, res []any) (err error) {
		err = s.impl.Foo(ctx)
		return
	}

	info := kod.CallInfo{
		Impl:       s.impl,
		Component:  s.name,
		FullMethod: "github.com/go-kod/kod/tests/case1/testService.Foo",
		Method:     "Foo",
	}

	err = s.interceptor(ctx, info, []any{}, []any{}, call)
	return
}
