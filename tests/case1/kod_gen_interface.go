// Code generated by "kod generate"; DO NOT EDIT.

package case1

import (
	"context"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/labstack/echo/v4"
)

// test1Controller is implemented by [test1ControllerImpl],
// which can be mocked with [NewMocktest1Controller].
type test1Controller interface {
}

// testService is implemented by [serviceImpl],
// which can be mocked with [NewMocktestService].
type testService interface {
	// Foo is implemented by [serviceImpl.Foo]
	Foo(ctx context.Context) error
}

// testRepository is implemented by [modelImpl],
// which can be mocked with [NewMocktestRepository].
type testRepository interface {
	// Foo is implemented by [modelImpl.Foo]
	Foo(ctx context.Context) error
}

// Test1Component is implemented by [test1Component],
// which can be mocked with [NewMockTest1Component].
type Test1Component interface {
	// Foo is implemented by [test1Component.Foo]
	Foo(ctx context.Context, req *FooReq) (*FooRes, error)
}

// Test2Component is implemented by [test2Component],
// which can be mocked with [NewMockTest2Component].
type Test2Component interface {
	// GetClient is implemented by [test2Component.GetClient]
	GetClient() *http.Client
}

// ctxInterface is implemented by [ctxImpl],
// which can be mocked with [NewMockctxInterface].
type ctxInterface interface {
	// Foo is implemented by [ctxImpl.Foo]
	//
	//	Foo is a http handler
	Foo(ctx context.Context)
}

// test1ComponentDefaultError is implemented by [test1ComponentDefaultErrorImpl],
// which can be mocked with [NewMocktest1ComponentDefaultError].
type test1ComponentDefaultError interface {
}

// test1ComponentGlobalDefaultError is implemented by [test1ComponentGlobalDefaultErrorImpl],
// which can be mocked with [NewMocktest1ComponentGlobalDefaultError].
type test1ComponentGlobalDefaultError interface {
}

// testEchoController is implemented by [testEchoControllerImpl],
// which can be mocked with [NewMocktestEchoController].
type testEchoController interface {
	// Hello is implemented by [testEchoControllerImpl.Hello]
	//
	//	Hello is a method of testEchoControllerImpl
	Hello(c echo.Context) error
	// Error is implemented by [testEchoControllerImpl.Error]
	//
	//	Error is a method of testEchoControllerImpl
	Error(c echo.Context) error
}

// testGinController is implemented by [testGinControllerImpl],
// which can be mocked with [NewMocktestGinController].
type testGinController interface {
	// Hello is implemented by [testGinControllerImpl.Hello]
	//
	//	Hello is a method of testGinControllerImpl
	Hello(c *gin.Context)
}

// HTTPController is implemented by [httpControllerImpl],
// which can be mocked with [NewMockHTTPController].
type HTTPController interface {
	// Foo is implemented by [httpControllerImpl.Foo]
	//
	//	Foo is a http handler
	Foo(w http.ResponseWriter, r *http.Request)
}

// InterceptorRetry is implemented by [interceptorRetry],
// which can be mocked with [NewMockInterceptorRetry].
type InterceptorRetry interface {
	// TestError is implemented by [interceptorRetry.TestError]
	TestError(ctx context.Context) error
	// TestNormal is implemented by [interceptorRetry.TestNormal]
	TestNormal(ctx context.Context) error
}

// LazyInitImpl is implemented by [lazyInitImpl],
// which can be mocked with [NewMockLazyInitImpl].
type LazyInitImpl interface {
	// Try is implemented by [lazyInitImpl.Try]
	Try(ctx context.Context)
}

// LazyInitComponent is implemented by [lazyInitComponent],
// which can be mocked with [NewMockLazyInitComponent].
type LazyInitComponent interface {
	// Try is implemented by [lazyInitComponent.Try]
	Try(ctx context.Context) error
}

// panicCaseInterface is implemented by [panicCase],
// which can be mocked with [NewMockpanicCaseInterface].
type panicCaseInterface interface {
	// TestPanic is implemented by [panicCase.TestPanic]
	TestPanic(ctx context.Context)
}

// panicNoRecvoeryCaseInterface is implemented by [panicNoRecvoeryCase],
// which can be mocked with [NewMockpanicNoRecvoeryCaseInterface].
type panicNoRecvoeryCaseInterface interface {
	// TestPanic is implemented by [panicNoRecvoeryCase.TestPanic]
	TestPanic(ctx context.Context)
}
