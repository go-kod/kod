// Code generated by MockGen. DO NOT EDIT.
// Source: tests/case1/kod_gen_interface.go
//
// Generated by this command:
//
//	mockgen -source tests/case1/kod_gen_interface.go -destination tests/case1/kod_gen_mock.go -package case1
//
// Package case1 is a generated GoMock package.
package case1

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// Mocktest1Controller is a mock of test1Controller interface.
type Mocktest1Controller struct {
	ctrl     *gomock.Controller
	recorder *Mocktest1ControllerMockRecorder
}

// Mocktest1ControllerMockRecorder is the mock recorder for Mocktest1Controller.
type Mocktest1ControllerMockRecorder struct {
	mock *Mocktest1Controller
}

// NewMocktest1Controller creates a new mock instance.
func NewMocktest1Controller(ctrl *gomock.Controller) *Mocktest1Controller {
	mock := &Mocktest1Controller{ctrl: ctrl}
	mock.recorder = &Mocktest1ControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mocktest1Controller) EXPECT() *Mocktest1ControllerMockRecorder {
	return m.recorder
}

// Foo mocks base method.
func (m *Mocktest1Controller) Foo(cccccc *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Foo", cccccc)
}

// Foo indicates an expected call of Foo.
func (mr *Mocktest1ControllerMockRecorder) Foo(cccccc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Foo", reflect.TypeOf((*Mocktest1Controller)(nil).Foo), cccccc)
}

// Foo1 mocks base method.
func (m *Mocktest1Controller) Foo1(cccccc *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Foo1", cccccc)
}

// Foo1 indicates an expected call of Foo1.
func (mr *Mocktest1ControllerMockRecorder) Foo1(cccccc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Foo1", reflect.TypeOf((*Mocktest1Controller)(nil).Foo1), cccccc)
}

// Foo2 mocks base method.
func (m *Mocktest1Controller) Foo2(cccccc *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Foo2", cccccc)
}

// Foo2 indicates an expected call of Foo2.
func (mr *Mocktest1ControllerMockRecorder) Foo2(cccccc any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Foo2", reflect.TypeOf((*Mocktest1Controller)(nil).Foo2), cccccc)
}

// MockHTTPController is a mock of HTTPController interface.
type MockHTTPController struct {
	ctrl     *gomock.Controller
	recorder *MockHTTPControllerMockRecorder
}

// MockHTTPControllerMockRecorder is the mock recorder for MockHTTPController.
type MockHTTPControllerMockRecorder struct {
	mock *MockHTTPController
}

// NewMockHTTPController creates a new mock instance.
func NewMockHTTPController(ctrl *gomock.Controller) *MockHTTPController {
	mock := &MockHTTPController{ctrl: ctrl}
	mock.recorder = &MockHTTPControllerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHTTPController) EXPECT() *MockHTTPControllerMockRecorder {
	return m.recorder
}

// Foo mocks base method.
func (m *MockHTTPController) Foo(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Foo", w, r)
}

// Foo indicates an expected call of Foo.
func (mr *MockHTTPControllerMockRecorder) Foo(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Foo", reflect.TypeOf((*MockHTTPController)(nil).Foo), w, r)
}

// MocktestService is a mock of testService interface.
type MocktestService struct {
	ctrl     *gomock.Controller
	recorder *MocktestServiceMockRecorder
}

// MocktestServiceMockRecorder is the mock recorder for MocktestService.
type MocktestServiceMockRecorder struct {
	mock *MocktestService
}

// NewMocktestService creates a new mock instance.
func NewMocktestService(ctrl *gomock.Controller) *MocktestService {
	mock := &MocktestService{ctrl: ctrl}
	mock.recorder = &MocktestServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktestService) EXPECT() *MocktestServiceMockRecorder {
	return m.recorder
}

// Foo mocks base method.
func (m *MocktestService) Foo(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Foo", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Foo indicates an expected call of Foo.
func (mr *MocktestServiceMockRecorder) Foo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Foo", reflect.TypeOf((*MocktestService)(nil).Foo), ctx)
}

// MocktestRepository is a mock of testRepository interface.
type MocktestRepository struct {
	ctrl     *gomock.Controller
	recorder *MocktestRepositoryMockRecorder
}

// MocktestRepositoryMockRecorder is the mock recorder for MocktestRepository.
type MocktestRepositoryMockRecorder struct {
	mock *MocktestRepository
}

// NewMocktestRepository creates a new mock instance.
func NewMocktestRepository(ctrl *gomock.Controller) *MocktestRepository {
	mock := &MocktestRepository{ctrl: ctrl}
	mock.recorder = &MocktestRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocktestRepository) EXPECT() *MocktestRepositoryMockRecorder {
	return m.recorder
}

// Foo mocks base method.
func (m *MocktestRepository) Foo(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Foo", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Foo indicates an expected call of Foo.
func (mr *MocktestRepositoryMockRecorder) Foo(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Foo", reflect.TypeOf((*MocktestRepository)(nil).Foo), ctx)
}

// MockTest1Component is a mock of Test1Component interface.
type MockTest1Component struct {
	ctrl     *gomock.Controller
	recorder *MockTest1ComponentMockRecorder
}

// MockTest1ComponentMockRecorder is the mock recorder for MockTest1Component.
type MockTest1ComponentMockRecorder struct {
	mock *MockTest1Component
}

// NewMockTest1Component creates a new mock instance.
func NewMockTest1Component(ctrl *gomock.Controller) *MockTest1Component {
	mock := &MockTest1Component{ctrl: ctrl}
	mock.recorder = &MockTest1ComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTest1Component) EXPECT() *MockTest1ComponentMockRecorder {
	return m.recorder
}

// Foo mocks base method.
func (m *MockTest1Component) Foo(ctx context.Context, req *FooReq) (*FooRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Foo", ctx, req)
	ret0, _ := ret[0].(*FooRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Foo indicates an expected call of Foo.
func (mr *MockTest1ComponentMockRecorder) Foo(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Foo", reflect.TypeOf((*MockTest1Component)(nil).Foo), ctx, req)
}

// MockTest2Component is a mock of Test2Component interface.
type MockTest2Component struct {
	ctrl     *gomock.Controller
	recorder *MockTest2ComponentMockRecorder
}

// MockTest2ComponentMockRecorder is the mock recorder for MockTest2Component.
type MockTest2ComponentMockRecorder struct {
	mock *MockTest2Component
}

// NewMockTest2Component creates a new mock instance.
func NewMockTest2Component(ctrl *gomock.Controller) *MockTest2Component {
	mock := &MockTest2Component{ctrl: ctrl}
	mock.recorder = &MockTest2ComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTest2Component) EXPECT() *MockTest2ComponentMockRecorder {
	return m.recorder
}

// GetClient mocks base method.
func (m *MockTest2Component) GetClient() *http.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient")
	ret0, _ := ret[0].(*http.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient.
func (mr *MockTest2ComponentMockRecorder) GetClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockTest2Component)(nil).GetClient))
}

// MockpanicCaseInterface is a mock of panicCaseInterface interface.
type MockpanicCaseInterface struct {
	ctrl     *gomock.Controller
	recorder *MockpanicCaseInterfaceMockRecorder
}

// MockpanicCaseInterfaceMockRecorder is the mock recorder for MockpanicCaseInterface.
type MockpanicCaseInterfaceMockRecorder struct {
	mock *MockpanicCaseInterface
}

// NewMockpanicCaseInterface creates a new mock instance.
func NewMockpanicCaseInterface(ctrl *gomock.Controller) *MockpanicCaseInterface {
	mock := &MockpanicCaseInterface{ctrl: ctrl}
	mock.recorder = &MockpanicCaseInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpanicCaseInterface) EXPECT() *MockpanicCaseInterfaceMockRecorder {
	return m.recorder
}

// TestPanic mocks base method.
func (m *MockpanicCaseInterface) TestPanic(r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TestPanic", r)
}

// TestPanic indicates an expected call of TestPanic.
func (mr *MockpanicCaseInterfaceMockRecorder) TestPanic(r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TestPanic", reflect.TypeOf((*MockpanicCaseInterface)(nil).TestPanic), r)
}
