//go:build !ignoreKodGen

// Code generated by MockGen. DO NOT EDIT.
// Source: tests/case3/kod_gen_interface.go
//
// Generated by this command:
//
//	mockgen -source tests/case3/kod_gen_interface.go -destination tests/case3/kod_gen_mock.go -package case3 -typed -build_constraint !ignoreKodGen
//

// Package case3 is a generated GoMock package.
package case3

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockTest1Component is a mock of Test1Component interface.
type MockTest1Component struct {
	ctrl     *gomock.Controller
	recorder *MockTest1ComponentMockRecorder
	isgomock struct{}
}

// MockTest1ComponentMockRecorder is the mock recorder for MockTest1Component.
type MockTest1ComponentMockRecorder struct {
	mock *MockTest1Component
}

// NewMockTest1Component creates a new mock instance.
func NewMockTest1Component(ctrl *gomock.Controller) *MockTest1Component {
	mock := &MockTest1Component{ctrl: ctrl}
	mock.recorder = &MockTest1ComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTest1Component) EXPECT() *MockTest1ComponentMockRecorder {
	return m.recorder
}

// Foo mocks base method.
func (m *MockTest1Component) Foo(ctx context.Context, req *FooReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Foo", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Foo indicates an expected call of Foo.
func (mr *MockTest1ComponentMockRecorder) Foo(ctx, req any) *MockTest1ComponentFooCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Foo", reflect.TypeOf((*MockTest1Component)(nil).Foo), ctx, req)
	return &MockTest1ComponentFooCall{Call: call}
}

// MockTest1ComponentFooCall wrap *gomock.Call
type MockTest1ComponentFooCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTest1ComponentFooCall) Return(arg0 error) *MockTest1ComponentFooCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTest1ComponentFooCall) Do(f func(context.Context, *FooReq) error) *MockTest1ComponentFooCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTest1ComponentFooCall) DoAndReturn(f func(context.Context, *FooReq) error) *MockTest1ComponentFooCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTest2Component is a mock of Test2Component interface.
type MockTest2Component struct {
	ctrl     *gomock.Controller
	recorder *MockTest2ComponentMockRecorder
	isgomock struct{}
}

// MockTest2ComponentMockRecorder is the mock recorder for MockTest2Component.
type MockTest2ComponentMockRecorder struct {
	mock *MockTest2Component
}

// NewMockTest2Component creates a new mock instance.
func NewMockTest2Component(ctrl *gomock.Controller) *MockTest2Component {
	mock := &MockTest2Component{ctrl: ctrl}
	mock.recorder = &MockTest2ComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTest2Component) EXPECT() *MockTest2ComponentMockRecorder {
	return m.recorder
}

// Foo mocks base method.
func (m *MockTest2Component) Foo(ctx context.Context, req *FooReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Foo", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Foo indicates an expected call of Foo.
func (mr *MockTest2ComponentMockRecorder) Foo(ctx, req any) *MockTest2ComponentFooCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Foo", reflect.TypeOf((*MockTest2Component)(nil).Foo), ctx, req)
	return &MockTest2ComponentFooCall{Call: call}
}

// MockTest2ComponentFooCall wrap *gomock.Call
type MockTest2ComponentFooCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTest2ComponentFooCall) Return(arg0 error) *MockTest2ComponentFooCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTest2ComponentFooCall) Do(f func(context.Context, *FooReq) error) *MockTest2ComponentFooCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTest2ComponentFooCall) DoAndReturn(f func(context.Context, *FooReq) error) *MockTest2ComponentFooCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockTest3Component is a mock of Test3Component interface.
type MockTest3Component struct {
	ctrl     *gomock.Controller
	recorder *MockTest3ComponentMockRecorder
	isgomock struct{}
}

// MockTest3ComponentMockRecorder is the mock recorder for MockTest3Component.
type MockTest3ComponentMockRecorder struct {
	mock *MockTest3Component
}

// NewMockTest3Component creates a new mock instance.
func NewMockTest3Component(ctrl *gomock.Controller) *MockTest3Component {
	mock := &MockTest3Component{ctrl: ctrl}
	mock.recorder = &MockTest3ComponentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTest3Component) EXPECT() *MockTest3ComponentMockRecorder {
	return m.recorder
}

// Foo mocks base method.
func (m *MockTest3Component) Foo(ctx context.Context, req *FooReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Foo", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Foo indicates an expected call of Foo.
func (mr *MockTest3ComponentMockRecorder) Foo(ctx, req any) *MockTest3ComponentFooCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Foo", reflect.TypeOf((*MockTest3Component)(nil).Foo), ctx, req)
	return &MockTest3ComponentFooCall{Call: call}
}

// MockTest3ComponentFooCall wrap *gomock.Call
type MockTest3ComponentFooCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockTest3ComponentFooCall) Return(arg0 error) *MockTest3ComponentFooCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockTest3ComponentFooCall) Do(f func(context.Context, *FooReq) error) *MockTest3ComponentFooCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockTest3ComponentFooCall) DoAndReturn(f func(context.Context, *FooReq) error) *MockTest3ComponentFooCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
